<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Openshift | Tech Notes]]></title>
  <link href="http://ogibayashi.github.io/blog/categories/openshift/atom.xml" rel="self"/>
  <link href="http://ogibayashi.github.io/"/>
  <updated>2014-12-11T00:57:33+09:00</updated>
  <id>http://ogibayashi.github.io/</id>
  <author>
    <name><![CDATA[OGIBAYASHI Hironori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Stated With OpenShiftを読んだ]]></title>
    <link href="http://ogibayashi.github.io/blog/2014/09/27/getting-started-with-openshift/"/>
    <updated>2014-09-27T08:16:08+09:00</updated>
    <id>http://ogibayashi.github.io/blog/2014/09/27/getting-started-with-openshift</id>
    <content type="html"><![CDATA[<p><a href="http://shop.oreilly.com/product/0636920033226.do">Getting Stated with OpenShift</a>を読んだので、簡単にまとめ. とりあえず4章まで.</p>

<h2>この本について</h2>

<p>OpenShiftの管理者ではなく、Webアプリケーション開発者向けの本. OpenShift Onlineを使って、どのようにWebアプリケーションを動かすことができるか、ということが書いてある</p>

<h2>1. Introduction</h2>

<ul>
<li>OpenShiftとは？

<ul>
<li>RedHatが提供するPaaS</li>
</ul>
</li>
<li>3つのバージョンがある

<ul>
<li>OpenShift Origin : オープンソースであり、最新版. 自分の環境に入れて使うことができる. OnlineやEnterpriseのUpstreamとなる.</li>
<li>OpenShift Online : RedHatが提供するクラウドサービス版. AWS上で動いており、アカウントを作ればOpenShiftの環境を使うことができる.  本書はこれを対象に書かれている.</li>
<li>OpenShift Enterprise : Productionでの利用を想定し、RedHatによりサポートされる安定版. 自分でインストールして使う.</li>
</ul>
</li>
<li>基本的な用語

<ul>
<li>Application : OpenShift上で動かすWebアプリケーション</li>
<li>Gear : サーバコンテナ. 使えるリソースに応じて、small, medium, largeの3タイプがある</li>
<li>Cartridge: Gearに追加する機能の固まり. JBossとか、Pythonとか、DatabaseとかCronとか.</li>
</ul>
</li>
</ul>


<h2>2. Creating Application</h2>

<ul>
<li>OpenShift Onlineを使うための流れは以下の通り

<ul>
<li>アカウントを作る</li>
<li>コマンドラインツール(rhc)を入れる. rhcはrubygemなので、<code>gem install rhc</code>で入れることができる</li>
<li>コマンドラインツールをセットアップする. <code>rhc setup</code>で行う. OpenShiftのAPIをコマンドラインから使うための認証情報などを登録する.</li>
</ul>
</li>
<li>以後、OpenShift上のアプリケーション管理は<code>rhc</code>コマンドで行う</li>
<li>OpenShiftのアプリケーションを作るには<code>rhc app create insultapp python-2.7</code>のようにする. 引数は、アプリケーション名と言語.

<ul>
<li>実行すると、アプリケーションにアクセスするためのURLや、GearにSSHログインするためのユーザ名@ホスト名が表示される</li>
<li>また、カレントディレクトリにGitリポジトリが作成される. このリポジトリ内にアプリケーションのコードや色々な設定が格納される.</li>
</ul>
</li>
<li>アプリケーションを作成する際に、 <code>-g</code>オプションを付けるとautoscaling機能が有効になる. 有効にすると、HAProxyがセットアップされ、アプリケーションがスケールアウトできるようになる

<ul>
<li>本書では簡略化のためautoscalingは使っていないが、有効にしておいた方が良い</li>
</ul>
</li>
<li>smallのgearであれば無償で使える. 無償版の場合、48時間リクエストが無いとアプリケーションは一旦ディスクに書かれ、次回リクエスト時に再ロードされる (応答に時間がかかる)

<ul>
<li>お金を払えば、gearを増やしたり、より大きなgearを使ったり、ディスク容量を拡張したり、JBoss EAP等の有償Cartridgeを使ったり、サポートチケットを発行したり、などなどができる.</li>
</ul>
</li>
</ul>


<h2>3. Making Code Modifications</h2>

<ul>
<li>アプリケーション作成時に作成されたGitリポジトリ内にコードを書いて、<code>git push</code>するとデプロイされる</li>
<li><code>.openshift/action_hooks</code>ディレクトリ内にファイルを作成しておくことで、デプロイの特定のタイミングで任意の処理を実行することができる. (action hook script)</li>
<li>通常、アプリケーションのデプロイ時にアプリケーションは一旦停止する. <code>.openshift/markers/hot_deploy</code> ファイルを作成しておくと、ホットデプロイが有効になる.</li>
</ul>


<h2>4. Adding Application Components</h2>

<ul>
<li>Cartridgeを追加することで、アプリケーションに様々な機能を追加することができる(<code>rhc cartridge add &lt;cartridge名&gt;</code>). この章では以下のCartridgeが紹介されている.</li>
<li>Database

<ul>
<li>PostgreSQL, MySQL, MongoDB等のデータベースを使うことができる</li>
<li>アプリケーションがscalableでなければ同じgearに、そうでなければDatabase専用gearが作成され、その中にインストールされる</li>
<li>追加時に、DBへアクセスするためのアカウントやURL等が表示される</li>
</ul>
</li>
<li>Cron

<ul>
<li>cronを使うことができる</li>
<li>git repositoryの<code>openshift/cron/{minutely,hourly,daily,weekly,monthly}/</code>以下にファイルを作成し、<code>git push</code>すると有効になる</li>
</ul>
</li>
<li>Continuous Integration (jenkins)

<ul>
<li>まず、<code>rhc app create</code>でJenkins用のアプリケーションを作成する</li>
<li>その上で、元のアプリケーションに<code>rhc cartridge add</code>でJenkinsのクライアントをCartridgeとして追加.</li>
<li>これにより、アプリケーションをpushした際にJenkins上でビルドやテストが走るようになる. ビルドが失敗した場合、アプリケーションはデプロイされない</li>
</ul>
</li>
<li>Metrics and Monitoring

<ul>
<li><code>rhc cartridge add metrics-0.1 -a appname</code>のようにすることで、アプリケーションのモニタリング画面が追加される. CPUやメモリの状況等を確認可能</li>
</ul>
</li>
<li>その他にも、コミュニティで開発された多数のCartridgeが存在し、利用することができる.</li>
</ul>

]]></content>
  </entry>
  
</feed>
